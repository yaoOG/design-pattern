## 单例模式

### 一、定义

属于创建模式，提供了一种创建对象的最佳方式。该模式涉及到一个单一的类，该类负责创建自己的对象，并且保证只有单个对象被创建，同时提供一种访问其唯一的对象的方式。

#### 	注意

1. 单例类只能有一个实例。
2. 单例类必须自己创建自己的唯一实例。
3. 单例类必须给所有其他对象提供这一实例。

### 二、目的

保证一个类仅有一个实例，并提供一个全局访问点。

### 三、主要意图

一个全局使用的类频繁的创建和销毁。

### 四、优点

1. 在内存中只有一个实例，减少了内存的开销。
2. 避免对资源的多重占用。

### 五、缺点

没有接口，不能继承，与单一职责原则冲突，一个类应该只关心内部逻辑，而不关心外面怎么样来实例化。

### 六、实现

创建一个 *SingleObject* 类。*SingleObject* 类有它的私有构造函数和本身的一个静态实例。SingleObject类提供了一个静态方法，供外界获取它的静态实例。*SingletonPatternDemo*，我们的演示类使用 *SingleObject* 类来获取 *SingleObject* 对象。

![image-20190812153122689](/Users/zhuyao/Library/Application Support/typora-user-images/image-20190812153122689.png)

##### 步骤一：创建一个SingleObject类

```java
public class SingleObject {
   //创建 SingleObject 的一个对象
   private static SingleObject instance = new SingleObject();
   //让构造函数为 private，这样该类就不会被实例化
   private SingleObject(){}
   //获取唯一可用的对象
   public static SingleObject getInstance(){
      return instance;
   }
   public void showMessage(){
      System.out.println("Hello World!");
   }
}
```

##### 步骤二：从SingleObject类获取唯一的对象

```java
public class SingletonPatternDemo {
   public static void main(String[] args) {
      //不合法的构造函数
      //编译时错误：构造函数 SingleObject() 是不可见的
      //SingleObject object = new SingleObject();
      //获取唯一可用的对象
      SingleObject object = SingleObject.getInstance();
      //显示消息
      object.showMessage();
   }
}
```

##### 步骤三：验证输出

```java
Hello World!
```



### 七、实现单例的方式

#### 差异比较

|                      | 懒加载 | 线程安全 | 实现难度 |                   备注                   |
| :------------------: | :----: | :------: | :------: | :--------------------------------------: |
| 懒汉式（线程不安全） |   是   |  不安全  |   简单   |                                          |
|  懒汉式（线程安全）  |   是   |   安全   |   简单   |               加锁影响效率               |
|        饿汉式        |   否   |   安全   |   简单   |             容易产生垃圾对象             |
|        双检索        |   是   |    是    |   复杂   |     安全且在多线程情况下能保持高性能     |
|         枚举         |   否   |    是    |   简单   | 自动支持序列化机制，绝对防止多次实例化。 |

#### 1.懒汉式（线程不安全）

这种方式是最基本的实现方式，这种实现最大的问题就是不支持多线程。因为没有加锁 synchronized，所以严格意义上它并不算单例模式。

这种方式 lazy loading 很明显，不要求线程安全，在多线程不能正常工作。

```java
public class Singleton { 
    private static Singleton instance; 
    private Singleton (){} 
 
    public static Singleton getInstance() { 
    if (instance == null) { 
        instance = new Singleton(); 
    } 
    return instance; 
    } 
} 
```

#### 2.懒汉式（线程安全）

这种方式具备很好的 lazy loading，能够在多线程中很好的工作，但是，效率很低，99% 情况下不需要同步。

优点：第一次调用才初始化，避免内存浪费。

缺点：必须加锁 synchronized 才能保证单例，但加锁会影响效率。

getInstance() 的性能对应用程序不是很关键（该方法使用不太频繁）。

```java
public class Singleton { 
    private static Singleton instance; 
    private Singleton (){} 
    public static synchronized Singleton getInstance() { 
    if (instance == null) { 
        instance = new Singleton(); 
    } 
    return instance; 
    } 
}
```

#### 3.饿汉式

这种方式比较常用，但容易产生垃圾对象。

优点：没有加锁，执行效率会提高。

缺点：类加载时就初始化，浪费内存。

它基于 classloder 机制避免了多线程的同步问题，不过，instance 在类装载时就实例化，虽然导致类装载的原因有很多种，在单例模式中大多数都是调用 getInstance 方法， 但是也不能确定有其他的方式（或者其他的静态方法）导致类装载，这时候初始化 instance 显然没有达到 lazy loading 的效果。

```java
 public class Singleton { 
    private static Singleton instance = new Singleton(); 
    private Singleton (){} 
    public static Singleton getInstance() { 
    return instance; 
    } 
} 
```

#### 4.双检索

这种方式采用双锁机制，安全且在多线程情况下能保持高性能。

getInstance() 的性能对应用程序很关键。

```java
public class Singleton { 
    private volatile static Singleton singleton; 
    private Singleton (){} 
    public static Singleton getSingleton() { 
    if (singleton == null) { 
        synchronized (Singleton.class) { //同步在类对象上
        if (singleton == null) { 
            singleton = new Singleton(); 
        } 
        } 
    } 
    return singleton; 
    } 
} 
```

##### 解析 

- 第一个注意点：使用私有的构造函数，确保正常情况下该类不能被外部初始化（非正常情况比如通过反射初始化，一般使用反射之后单例模式也就失去效果了）。

- 第二个注意点：getInstance方法中第一个判空条件，逻辑上是可以去除的，去除之后并不影响单例的正确性，但是去除之后效率低。因为去掉之后，不管instance是否已经初始化，都会进行synchronized操作，而synchronized是一个重操作消耗性能。加上之后，如果已经初始化直接返回结果，不会进行synchronized操作。
- 第三个注意点：加上synchronized是为了防止多个线程同时调用getInstance方法时，各初始化instance一遍的并发问题。
- 第四个注意点：getInstance方法中的第二个判空条件是不可以去除，如果去除了，并且刚好有两个线程a和b都通过了第一个判空条件。此时假设a先获得锁，进入synchronized的代码块，初始化instance，a释放锁。接着b获得锁，进入synchronized的代码块，也直接初始化instance，instance被初始化多遍不符合单例模式的要求~。加上第二个判空条件之后，b获得锁进入synchronized的代码块，此时instance不为空，不执行初始化操作。

- 第五个注意点：instance的声明有一个voliate关键字，如果不用该关键字，有可能会出现异常。因为singleton = new Singleton();并不是一个原子操作，会被编译成三条指令，如下所示。 

1. 给Singleton的实例分配内存 

2. 初始化Singleton的构造器 

3. 将singleton对象指向分配的内存空间（注意 此时singleton就不为空） 

   然后咧，java会指令重排序，JVM根据处理器的特性，充分利用多级缓存，多核等进行适当的指令重排序，使程序在保证业务运行的同时，充分利用CPU的执行特点，最大的发挥机器的性能！简单来说就是jvm执行上面三条指令的时候，不一定是1-2-3这样执行，有可能是1-3-2这样执行。如果jvm是按照1-3-2来执行的话，当1-3执行完2还没执行的时候，如果另外一个线程调用getInstance()，因为3执行了此时instance不为空，直接返回instance。问题是2还没执行，此时instance相当于什么都没有，肯定是有问题的。然后咧，voliate有一个特性就是禁止指令重排序，上面的三条指令是按照1-2-3执行的，这样就没有问题了。

   **synchronized只能保证每个时刻只有一个线程执行同步代码，并不能保证同步代码中的某条java语句不被指令重排序。你说的synchronized保证有序性操作，应该是保证线程间的有序性操作，但是线程里的就不能了**

   

无法保证反序列化重新创建新的对象： 序列化会通过反射调用无参数的构造方法创建一个新的对象。    

解决方法：

```java
import java.io.Serializable;
/**
* 使用双重校验锁方式实现单例
*/
public class Singleton implements Serializable{
    private volatile static Singleton singleton;
    private Singleton (){}
    public static Singleton getSingleton() {
        if (singleton == null) {
            synchronized (Singleton.class) {
                if (singleton == null) {
                    singleton = new Singleton();
                }
            }
        }
        return singleton;
    }
    private Object readResolve() {
        return getInstance();
    }
}
```

#### 5.枚举

这种实现方式还没有被广泛采用，但这是实现单例模式的最佳方法。它更简洁，自动支持序列化机制，绝对防止多次实例化。

这种方式是 Effective Java 作者 Josh Bloch 提倡的方式，它不仅能避免多线程同步问题，而且还自动支持序列化机制，防止反序列化重新创建新的对象，绝对防止多次实例化。不过，由于 JDK1.5 之后才加入 enum 特性，用这种方式写不免让人感觉生疏，在实际工作中，也很少用。

不能通过 reflection attack 来调用私有构造方法。

枚举编译后就是class，当一个Java类第一次被真正使用到的时候静态资源被初始化、Java类的加载和初始化过程都是线程安全的。所以，**创建一个enum类型是线程安全的**。

```java
public enum Singleton { 
    INSTANCE; 
    public void whateverMethod() { 
    } 
} 
```

